source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin


""""""""""""""""""""""""""""""""""""""""""""""""
"""Some setting about Number and Relative Number
""""""""""""""""""""""""""""""""""""""""""""""""

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

if has('gui_running')
    nnoremap <silent> <A-n> :call NumberToggle()<cr>
else
    nnoremap <silent> n :call NumberToggle()<cr>
endif

autocmd InsertEnter * :set number

"autocmd InsertLeave * :set relativenumber
"au FocusLost * :set number
"au FocusGained * :set relativenumber

""""""""""""""""""""""""""""""""""""""""""""""""""""
"""End Some setting about Number and Relative Number
""""""""""""""""""""""""""""""""""""""""""""""""""""

sy on "syntax on

set laststatus=2

set history=10000

set go= "no toolbar and so on

filetype on

""""Indent""""
set autoindent "Ëá™Âä®Áº©Ëøõ

set smartindent "Âè™ËÉΩÁº©Ëøõ

set cindent

"""""Tab""""
set expandtab "use  4 spaces instead of tab

set tabstop=4

set shiftwidth=4

set softtabstop=4

set esckeys " Allow cursor keys in insert mode.

set history=1000

"set list
"set listchars=trail:-
"hi SpecialKey guifg=#161616 ctermfg=77

" ‰∏çË¶ÅÂìçÈìÉ
set vb t_vb=

" ‰∏çË¶ÅÈó™Â±è
au GUIEnter * set t_vb=

set showmatch

set ruler

set hlsearch

set incsearch

set showcmd

set cursorline

"set textwidth=80

"set colorcolumn=80

""set cursorcolumn

"set lines=21 columns=80
"set columns=80

"set wrap "Ëá™Âä®ÊäòË°å
set nowrap "‰∏çËá™Âä®ÊäòË°å

set ignorecase

filetype plugin on

set wildmenu

set wildmode=longest:full,full

nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F2>

set virtualedit=block

"--------------Vundle setup--------------------

"**********************************************
"**********************************************
set nocompatible               " be iMproved
filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

 " let Vundle manage Vundle
 " required!
 Bundle 'gmarik/vundle'

 " My Bundles here:
 "
 Bundle 'taglist.vim'
 Bundle 'The-NERD-tree'
 Bundle 'snipMate'
 Bundle 'Yggdroot/indentLine'
 Bundle 'Shougo/neocomplete.vim'
 "Bundle 'Shougo/neocomplcache.vim'
 Bundle 'javacomplete'
 Bundle 'Syntastic'
 Bundle 'Gundo'
 Bundle 'octave.vim'
 Bundle 'instant-markdown.vim'
 Bundle 'clang-complete'
 Bundle 'VimIM'
 Bundle 'terryma/vim-multiple-cursors'
 Bundle 'yueyoum/vim-linemovement'
 Bundle 'surround.vim'
 "Bundle 'LargeFile'

 "Session"
 Bundle 'xolox/vim-session'
 Bundle 'xolox/vim-misc'

 "Ruby and Rails"
 Bundle 'vim-ruby/vim-ruby'
 Bundle 'rails.vim'
 Bundle 'bundler'
 Bundle 'rubycomplete.vim'

 "File Searching
 Bundle 'ctrlp.vim'
 Bundle 'L9'
 Bundle 'FuzzyFinder'
 Bundle 'ack.vim'
 "Bundle 'unite.vim'

 "Bundle 'bling/vim-airline'
 "Bundle 'vim-scripts/statusline.vim'
 "Bundle 'fuenor/vim-statusline'
 "Bundle 'millermedeiros/vim-statline'
 "Bundle 'TagHighlight' "highlight more
 "Bundle 'fcitx.vim'

 Bundle 'tomtom/tcomment_vim'


 ""Bundle 'Python-mode-klen'
 ""Bundle 'Pydiction'
 ""Bundle 'pythoncomplete'

 ""Bundle 'AutoComplPop' for eclim completion

 ""colorscheme
 Bundle 'Solarized'
 Bundle 'CSApprox'

let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }


 "For Markdown Language
 "Bundle 'Markdown'

 "For python complete
 Bundle 'davidhalter/jedi-vim'

 "Bundle 'Valloric/YouCompleteMe'
 "required python2, both 2 and 3 is not
 "allowed .

 "For Latex
 "Bundle 'coot/atp_vim'
 "
 "Bundle 'millermedeiros/vim-statline'
 "Bundle 'statusline.vim'
 "Bundle 'Lokaltog/vim-powerline'
 "
 """"""""""""""""""""""""""""""""""""
 "
 " Tutor Example
 " original repos on github
 " Bundle 'tpope/vim-fugitive'
 " Bundle 'Lokaltog/vim-easymotion'
 " Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
 " Bundle 'tpope/vim-rails.git'
 " vim-scripts repos
 " Bundle 'L9'
 " Bundle 'FuzzyFinder'
 " non github repos
 " Bundle 'git://git.wincent.com/command-t.git'
 " ...

 filetype plugin indent on     " required!
 "
 " Brief help
 " :BundleList          - list configured bundles
 " :BundleInstall(!)    - install(update) bundles
 " :BundleSearch(!) foo - search(or refresh cache first) for foo
 " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
 "
 " see :h vundle for more details or wiki for FAQ
 " NOTE: comments after Bundle command are not allowed..
"********************************************************

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
""set fencs=utf-8,cp936,gb18030,gbk,ucs-bom,shift-jis
set fileencodings=ucs-bom,utf-8,gb2312,gbk,gb18030,big5,cp936,default ""
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"language messages = zh_CH.utf-8

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable "Enable syntax hl

set guifont=Source\ Code\ Pro\ 10.99 "Source\ Code\ Pro\ 10.99 "Inconsolata\ 12.9 Monaco\ 9.9 monofur\ 11.9 DejaVu\ Sans\ Mono\ 10.6  Ubuntu\ Mono\ 10.9 Lucida\ Console\ 11.6  Meslo\ LG\ S\ 10.99 Linux ‰∏ãÈù¢‰ΩøÁî®
"set guifont=Bitstream_Vera_Sans_Mono:h11:cANSI "Windos‰∏ãÈù¢‰ΩøÁî®
"set gfw=Microsoft_YaHei:h12:cGB2312
"set gfw=Microsoft_YaHei:h19:cGB18030
"set gfw=YaHei_Segoe_UI:h19:cBig5

set guioptions=+
if has('gui_running')
    "colorscheme Lafwind_Day_Ver2
    "colorscheme Lafwind_Pink
    "colorscheme Lafwind_Night
    "colorscheme Lafwind_Day
    colorscheme Lafwind_Night_Ver2
    "colorscheme Lafwind_Night_Ver2_light
    "colorscheme Lafwind_Green
    "colorscheme Lafwind_Ocean
else
    colorscheme Lafwind_Night_Term_Ver2
    "colorscheme Lafwind_Night_Term
    "colorscheme Lafwind_Day_Term
endif
"colorscheme Lafwind_Day
"colorscheme Lafwind_Night
set number
set t_Co=256
set backspace=eol,start,indent

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""CTAGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=/home/lafwind/Source_Codes/tags
"let Tlist_Ctags_Cmd = 'C:\Windows\System32\ctags.exe'
"set tags=tags;
"set autochdir
"
set path=.,/usr/local/include,/usr/include,/home/lafwind/Source_Codes/**

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""TagList
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let Tlist_Auto_Open = 1

let Tlist_Exit_OnlyWindow = 1

let Tlist_File_Fold_Auto_Close = 1

let Tlist_Highlight_Tag_On_BufEnter = 0

let Tlist_Show_One_File = 1

let Tlist_Use_Right_Window = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""NERDTREE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDTreeChDirMode=2
"let NERDTreeWinPos="right"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""Map
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

noremap gb ^
noremap ge $
noremap tn <Esc>:tabnew<CR>
nmap <F5> bi{<Esc>ea}<Esc>
""imap <> <><Esc>i
"imap {} {}<Esc>i<CR><Esc><S-o>
imap {} {}<Esc>i
imap [] []<Esc>i
imap () ()<Esc>i
imap "" ""<Esc>i
imap '' ''<Esc>i
vmap g/ y/<c-r>"<cr>
nmap <Leader>w <Plug>VimwikiIndex
noremap <silent> <F8> <Esc>:NERDTreeToggle <cr>
nnoremap <silent> <F9> :TlistToggle<CR>

inoremap <C-e> <Esc><S-a>
inoremap <C-a> <Esc><S-i>
inoremap <C-w> <Esc>bvwc
inoremap <C-k> <Esc>lv$c

"noremap <C-b> <Left>
"noremap <C-n> <Down>
"noremap <C-p> <Up>
"noremap <C-f> <Right>
noremap <c-h> <c-w>h
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l
noremap th <Esc>:tabprevious<cr>
noremap tl <Esc>:tabnext<cr>
vnoremap ( c(<Esc>pa)
vnoremap [ c[<Esc>pa]
vnoremap { c{<Esc>pa}
vnoremap " c"<Esc>pa"
vnoremap ' c'<Esc>pa'

noremap mh :nohls<CR>
noremap ,v :e $MYVIMRC<CR>
noremap ,r :RestartVim<CR>

noremap ,ls :Buffers<CR>

iab xfile <c-r>=expand("%:t")<CR>


if has('gui_running')
    nnoremap <A-m> :mkview<CR>
    nnoremap <A-l> :loadview<CR>
    inoremap <A-h> <Left>
    inoremap <A-j> <Down>
    inoremap <A-k> <Up>
    inoremap <A-l> <Right>
    vnoremap <A-h> y/<C-R>=escape(@",'\\/.*$^~[]')<CR><CR>
else
    nnoremap m :mkview<CR>
    nnoremap l :loadview<CR>
    inoremap h <Left>
    inoremap j <Down>
    inoremap k <Up>
    inoremap l <Right>
    vnoremap h y/<C-R>=escape(@",'\\/.*$^~[]')<CR><CR>
endif

"noremap : q:i
"cnoremap <Tab> <c-f>

"""end Map"""

"cd c:/Codes
cd /home/lafwind/Source_Codes

let g:bufExplorerSplitBelow=1        " Split new window below current.

let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.


let g:acp_behaviorSnipmateLength=1
let g:acp_completeOption = '.,w,b,u,t,i,k'
let g:AutoComplPop_Behavior = {
\ 'c': [ {'command' : "\<C-x>\<C-o>",
\ 'pattern' : ".",
\ 'repeat' : 0}
\ ]
\}



"Conque
"let g:ConqueTerm_ToggleKey = 'ts'
"let g:ConqueTerm_FastMode = 0
""let g:ConqueTerm_StartMessages = 0
"let g:ConqueTerm_PromptRegex = '^\w\+@[0-9A-Za-z_.-]\+:[0-9A-Za-z_./\~,:-]\+\$'
"let g:ConqueTerm_SendVisKey = '<F9><F9>'
"let g:ConqueTerm_ExecFileKey = '<F11><F11>'
"let g:ConqueTerm_SendFileKey = '<F10><F10>'



"""""""""""""""""""""""""""""""""""""""""""""
"""""""""Omnicppcomplete
"""""""""""""""""""""""""""""""""""""""""""""
set nocp
filetype plugin on
" map <F12> :!ctags -R --c++-kinds=+p --languages=c++ --fields=+iaS --extra=+q .<CR>
map <F12> :!ctags -R && cscope -Rbq<CR>
cs add cscope.out /home/lafwind/Source_Codes/



"""""""""""""""""""""""""""""""""""""""""""""
""""""""""BufExplorer
"""""""""""""""""""""""""""""""""""""""""""""
let g:bufExplorerUseCurrentWindow=0
let g:bufExplorerSplitBelow=0        " Split new window below current.
let g:bufExplorerSplitRight=0        " Split left.



"""""""""""""""""""""""""""""""""""""""""""""
""""""""""MiniExplorer
"""""""""""""""""""""""""""""""""""""""""""""
"let g:miniBufExplVSplit = 20   " column width in chars
"let g:miniBufExplShowBufNumbers = 0
"let g:miniBufExplModSelTarget = 1
"let g:miniBufExplCloseOnSelect = 1
"map mb :MiniBufExplorer<cr>



""""""""""""""""""""""""""""""""""""""""""""""
"""""""""txt.vim
""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.txt setlocal ft=txt
"au BufNewFile,BufRead *.txt		setf txt
"let g:ChapterNavigatorWindowPostion = 'left' "or 'right'
"let g:ChapterNavigatorWindowWidth = 89



"""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""PowerLine""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:Powerline_colorscheme = 'distingguished'
"let g:Powerline_symbols = 'fancy'
"set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10



""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""vimwiki""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vimwiki_list = [ {"path": "~/vimwiki/", "path_html": "~/wiki/",  "syntax": "markdown", "auto_export": 0}]



""""""""""""""""""""""""""""""""""""""""
"""""""CUC & List"""""""""""""""
""""""""""""""""""""""""""""""""""""""""
""set cuc
"set list
"set listchars=tab:\|\ ,trail:.



""""""""""""""""""""""""""""""""""""""""""""""
""""""""""Auto complete HTML & CSS"""""""""
""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType py set omnifunc=jedi




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""Neocomplcahe"""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_omni_functions = 1
if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif

let g:neocomplcache_force_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_force_omni_patterns.css = '[^. *\t]\:\w*\|\.\w*\|\h\w*::'

if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.css = '[^. *\t]\:\w*\|\.\w*\|\h\w*::'

let g:neocomplcache_omni_patterns.python = ''
let g:neocomplcache_omni_patterns.ruby = ''
let g:neocomplcache_omni_patterns.css = ''

""let g:ctab_filetype_maps=1
""let g:ctab_enable_default_filetype_maps=1
""let g:ctab_disable_tab_maps=0

""""""""""""""""""""""""""""""""""""""""""""""""
"neocomplete
""""""""""""""""""""""""""""""""""""""""""""""""
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""AutoCmd""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""

"compile"
autocmd BufReadPre *.py nnoremap<buffer><F5> :w<CR>:set makeprg=python\ %<CR>:make<CR>
autocmd BufReadPre *.py nnoremap<buffer><F6> :w<CR>:set makeprg=python3\ %<CR>:make<CR>
autocmd BufReadPre *.cpp nnoremap<buffer><F5> :w<CR>:set makeprg=g++\ %\ -g\ -Wall\ -o\ %<<CR>:make<CR>
autocmd BufReadPre *.cpp nnoremap<buffer><F6> :w<CR>:!./%<<CR>
autocmd BufReadPre *.c nnoremap<buffer><F5> :w<CR>:set makeprg=gcc\ %\ -g\ -Wall\ -o\ %<<CR>:make<CR>
autocmd BufReadPre *.c nnoremap<buffer><F6> :w<CR>:!./%<<CR>
autocmd BufReadPre *.rb nnoremap<buffer><F5> :w<CR>:set makeprg=ruby\ %<CR>:make<CR>
autocmd BufReadPre *.java nnoremap<buffer><F5> :w<CR>:set makeprg=javac\ %<CR>:make<CR>
autocmd BufReadPre *.java nnoremap<buffer><F6> :w<CR>:!java -cp "%:p:h" "%:t:r"<CR>
""autocmd BufReadPre *.java nnoremap<buffer><F6> :w<CR>":!java\ %<<CR>
""autocmd FileType py nmap<buffer><F5> :w<CR>:set makeprg=python\ %<CR>:make<CR>
""autocmd FileType cpp nmap<buffer><F5> :w<CR>:set makeprg=g++\ %\ -g\ -Wall\ -o\ %<<CR>:make<CR>
""autocmd FileType cpp nmap<buffer><F6> :w<CR>:!./%<<CR>


"tabstop"
autocmd BufReadPre *.py set tabstop=2 | set sw=2 | set softtabstop=2
autocmd FileType *.py set tabstop=2 | set sw=2 | set softtabstop=2
autocmd BufReadPre *.rb set tabstop=2 | set sw=2 | set softtabstop=2
autocmd FileType *.rb set tabstop=2 | set sw=2 | set softtabstop=2
autocmd BufReadPre *.erb set tabstop=2 | set sw=2 | set softtabstop=2
autocmd BufReadPre *.html set tabstop=2 | set sw=2 | set softtabstop=2
autocmd BufReadPre *.css set tabstop=2 | set sw=2 | set softtabstop=2

autocmd BufLeave *.py set tabstop=4 | set sw=4 | set softtabstop=4
autocmd BufLeave *.rb set tabstop=4 | set sw=4 | set softtabstop=4
autocmd BufLeave *.ruby set tabstop=4 | set sw=4 | set softtabstop=4
autocmd BufLeave *.html set tabstop=4 | set sw=4 | set softtabstop=4
autocmd BufLeave *.css set tabstop=4 | set sw=4 | set softtabstop=4
autocmd BufLeave *.erb set tabstop=4 | set sw=4 | set softtabstop=4


"Quickfix"
autocmd BufReadPre *.py nnoremap<buffer><F7> :copen<CR>
autocmd BufReadPre *.rb nnoremap<buffer><F7> :copen<CR>
autocmd BufReadPre *.cpp nnoremap<buffer><F7> :copen<CR>
autocmd BufReadPre *.c nnoremap<buffer><F7> :copen<CR>
autocmd BufReadPre *.java nnoremap<buffer><F7> :copen<CR>
autocmd FileType qf nnoremap<buffer><F7> :cclose<CR>

"complete"
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd BufReadPre css setlocal omnifunc=csscomplete#CompleteCSS
autocmd BufReadPre html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd BufReadPre javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"""javacomplete"""
autocmd Filetype java setlocal omnifunc=javacomplete#Complete                        "Ëá™Âä®Ë°•ÂÖ®
"autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo			"ÂèÇÊï∞ÊèêÁ§∫
inoremap <buffer> <C-X><C-U> <C-X><C-U><C-P>
inoremap <buffer> <C-S-Space> <C-X><C-U><C-P>
"autocmd Filetype java,javascript,jsp inoremap <buffer>. .<C-X><C-O><C-P>
"""end javacomplete"""

"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

"Other"
autocmd BufReadPre *.py set foldmethod=indent | set foldlevel=99

"""important!!!!!!"""
"if has('python3')
"    autocmd FileType python setlocal omnifunc=python3complete#Complete    """Attention!!!!!!
"else
"    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete    """Attention!!!!!!
"endif





""autocmd BufReadPre *.py vnoremap<buffer>
set errorformat=\[ERROR]\ %f:[%l\\,%v]\ %m

""""""
"indentLine_yggdroot
""""""
let g:indentLine_char='‚îÜ'



""""""
"syntastic
""""""
let g:syntastic_check_on_open=1
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': ['python', 'ruby', 'php'],
                           \ 'passive_filetypes': ['c'] }

"Default is flake8
"let g:syntastic_python_checker = 'flake8'
let g:syntastic_python_checker = 'pyflakes'



""""""""""""""""""""""""""""""""""""""""""
" Indent Python in the Google way.
""""""""""""""""""""""""""""""""""""""""""

setlocal indentexpr=GetGooglePythonIndent(v:lnum)

let s:maxoff = 50 " maximum number of lines to look backwards.

function GetGooglePythonIndent(lnum)

  " Indent inside parens.
  " Align with the open paren unless it is at the end of the line.
  " E.g.
  "   open_paren_not_at_EOL(100,
  "                         (200,
  "                          300),
  "                         400)
  "   open_paren_at_EOL(
  "       100, 200, 300, 400)
  call cursor(a:lnum, 1)
  let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
        \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
        \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
        \ . " =~ '\\(Comment\\|String\\)$'")
  if par_line > 0
    call cursor(par_line, 1)
    if par_col != col("$") - 1
      return par_col
    endif
  endif

  " Delegate the rest to the original function.
  return GetPythonIndent(a:lnum)

endfunction

let pyindent_nested_paren="&sw*2"
let pyindent_open_paren="&sw*2"


"""""""""""""""""""""""""""""
""""""""""Pydiction""""""""""""
"""""""""""""""""""""""""""""

"let g:pydiction_location='/home/lafwind/.vim/bundle/pydiction/complete-dict'

""let $PYTHONPATH='/usr/local/lib/python2.7/dist-packages/'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""YouCompleteMe"""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
""let g:ycm_confirm_extra_conf = 1


""""""""""""""""""""""""""""""""""""
"""""""""""Go_Language"""""""""""
""""""""""""""""""""""""""""""""""""

" Some Linux distributions set filetype in /etc/vimrc.
" Clear filetype flags before changing runtimepath to force Vim to reload them.

filetype off
filetype plugin indent off
set runtimepath+=/usr/local/go/misc/vim
filetype plugin indent on
syntax on


"""""""""""""""""""""""""""""""""""""""
"""""""""""Eclim"""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""

let g:EclimProjectTreeAutoOpen=1


"""""""""""""""""""""""""""""""""""""""
""""""""""ctrlp""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git)$',
  \ 'file': '\v\.(log|jpg|png|jpeg)$',
  \ }
"let g:ctrlp_max_depth = 40
"""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""
"""""""""""LineMovement""""""""""""""""
"""""""""""""""""""""""""""""""""""""""
let g:linemovement_up="<C-S-k>"
let g:linemovement_down="<C-S-j>"

"""""""""""""""""""""""""""""""""""""""
""""""""Gundo""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""
nnoremap <C-S-u> :GundoToggle<CR>


""""""""""""""""""""""""""""""""""""""
""""""Clang Complete""""""""""""""""""
""""""""""""""""""""""""""""""""""""""
"let g:clang_library_path=/usr/lib/
" Clang Complete Settings
let g:clang_use_library=1
" if there's an error, allow us to see it
let g:clang_complete_copen=1
let g:clang_complete_macros=1
let g:clang_complete_patterns=0
" Limit memory use
let g:clang_memory_percent=70
" Remove -std=c++11 if you don't use C++ for everything like I do.
let g:clang_user_options=' -std=c++11 || exit 0'
" Set this to 0 if you don't want autoselect, 1 if you want autohighlight,
" and 2 if you want autoselect. 0 will make you arrow down to select the first
" option, 1 will select the first option for you, but won't insert it unless you
" press enter. 2 will automatically insert what it thinks is right. 1 is the most
" convenient IMO, and it defaults to 0.
let g:clang_auto_select=1

set conceallevel=2
set concealcursor=vin
let g:clang_snippets=1
let g:clang_conceal_snippets=1
" The single one that works with clang_complete
let g:clang_snippets_engine='clang_complete'

""""""""""""""""""""""""""""""""""""""
""""""End Clang Complete""""""""""""""""""
""""""""""""""""""""""""""""""""""""""


if !exists('g:neocomplcache_force_omni_patterns')
    let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_overwrite_completefunc = 1
let g:neocomplcache_force_omni_patterns.c =
            \ '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_force_omni_patterns.objc =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_force_omni_patterns.objcpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:clang_complete_auto = 0
let g:clang_auto_select = 1
let g:clang_use_library = 1

""""""""""""""""""""""""""""""""""""""
"""""""""End Clang Complete"""""""""""
""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""
""""""""""VimIM""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""

"let g:vimim_cloud='sogou,5'
"let g:vimim_static_input_style=1
"let g:vimim_toggle='sogou, pinyin'



""""""""""""""""""""""""""""""""""""""
""""""" User Defined Status Line.
""""""""""""""""""""""""""""""""""""""

augroup Statusline
  au! Statusline
  au BufEnter * call <SID>SetFullStatusline()
  au BufLeave,BufNew,BufRead,BufNewFile * call <SID>SetSimpleStatusline()
augroup END

function s:SetFullStatusline()
    setlocal statusline= "clear the statusline for when vimrc is reloaded
    setlocal statusline+=\ %n           "buffer number
    setlocal statusline+=\ %t       "tail of the filename
    setlocal statusline+=\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
    setlocal statusline+=%{&ff}] "file format
    setlocal statusline+=\ %h      "help file flag
    setlocal statusline+=\ %m      "modified flag
    setlocal statusline+=\ %r      "read only flag
    setlocal statusline+=\ %y      "filetype
    setlocal statusline+=\ %=   "left/right separator
    setlocal statusline+=\ [%c,     "cursor column
    setlocal statusline+=%l   "cursor line/total lines
    setlocal statusline+=/%L]   "cursor line/total lines
    setlocal statusline+=\ [%P]    "percent through file
    setlocal statusline+=\ [%06.6b, "ASCII
    setlocal statusline+=0x%04.4B] "ASCII
    setlocal statusline+=\ [%-16{strftime(\"%Y-%m-%d\ %H:%M\")}]  "time
endfunction

fun! s:SetSimpleStatusline() "{{{
    setlocal statusline= "clear the statusline for when vimrc is reloaded
    setlocal statusline+=\ %n\            "buffer number
    setlocal statusline+=\ %t\        "tail of the filename
    setlocal statusline+=\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
    setlocal statusline+=%{&ff}]\  "file format
    setlocal statusline+=\ %=   "left/right separator
    setlocal statusline+=\ [%P]\     "percent through file
endfunction "}}}

"function s:SetFullStatusline()
"    setlocal statusline= "clear the statusline for when vimrc is reloaded
"    setlocal statusline+=%1*\ %n%*           "buffer number
"    setlocal statusline+=%2*\ %t%*       "tail of the filename
"    setlocal statusline+=%3*\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
"    setlocal statusline+=%{&ff}]%* "file format
"    setlocal statusline+=%4*\ %h%*      "help file flag
"    setlocal statusline+=%5*\ %m%*      "modified flag
"    setlocal statusline+=%6*\ %r%*      "read only flag
"    setlocal statusline+=%1*\ %y%*      "filetype
"    setlocal statusline+=%7*\ %=%*   "left/right separator
"    setlocal statusline+=%2*\ [%c,     "cursor column
"    setlocal statusline+=%l%*   "cursor line/total lines
"    setlocal statusline+=%3*/%L]%*   "cursor line/total lines
"    setlocal statusline+=%4*\ [%P]%*    "percent through file
"    setlocal statusline+=%5*\ [%06.6b, "ASCII
"    setlocal statusline+=0x%04.4B]%* "ASCII
"    setlocal statusline+=%6*\ [%-16{strftime(\"%Y-%m-%d\ %H:%M\")}]%*  "time
"endfunction
"
"fun! s:SetSimpleStatusline() "{{{
"    setlocal statusline= "clear the statusline for when vimrc is reloaded
"    setlocal statusline+=%8*\ %n\ %*           "buffer number
"    setlocal statusline+=%9*\ %t\ &*       "tail of the filename
"    setlocal statusline+=%8*\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
"    setlocal statusline+=%{&ff}]\ %* "file format
"    setlocal statusline+=%9*\ %=%*   "left/right separator
"    setlocal statusline+=%9*\ [%P]\ %*    "percent through file
"endfunction "}}}
"
"""Normal
"hi User1 guifg=#aefe09 guibg=#3a3a3a
"hi User2 guifg=#aefe09 guibg=#3a3a3a
"hi User3 guifg=#aefe09 guibg=#3a3a3a
"hi User4 guifg=#aefe09 guibg=#3a3a3a
"hi User5 guifg=#aefe09 guibg=#3a3a3a
"hi User6 guifg=#aefe09 guibg=#3a3a3a
"hi User7 guifg=#eea060 guibg=#3a3a3a
"hi User8 guifg=#eea060
"hi User9 guifg=#eea060

""Lafwind_Day_Ver2 : guibg = #3d3d3d

"highlight StatusLine guifg=SlateBlue guibg=Yellow
"highlight StatusLineNC guifg=Gray guibg=White

"hi User1 guifg=#eea040 guibg=#3d3d3d
"hi User2 guifg=#dd3333 guibg=#3d3d3d
"hi User3 guifg=#ff66ff guibg=#3d3d3d
"hi User4 guifg=#a0ee40 guibg=#3d3d3d
"hi User5 guifg=#eeee40 guibg=#3d3d3d
"hi User6 guifg=#1980ff guibg=#3d3d3d
"hi User7 guifg=#3d3d3d guibg=#3d3d3d
"hi User8 guifg=#eea060
"hi User9 guifg=#ad3a3a

""Lafwind_Night and Lafwind_Night_Ver2 guibg = #1e1e1e

"hi User1 guifg=#eea040 guibg=#363636
"hi User2 guifg=#dd3333 guibg=#363636
"hi User3 guifg=#ff66ff guibg=#363636
"hi User4 guifg=#a0ee40 guibg=#363636
"hi User5 guifg=#eeee40 guibg=#363636
"hi User6 guifg=#1980ff guibg=#363636
"hi User7 guifg=#3d3d3d guibg=#363636
"hi User8 guifg=#eea060
"hi User9 guifg=#ad3a3a

""Lafwind_Night_Ver2_light : guibg = #1e1e1e

""hi User1 guifg=#eea040 guibg=#3f3f3f
""hi User2 guifg=#dd3333 guibg=#3f3f3f
""hi User3 guifg=#ff66ff guibg=#3f3f3f
""hi User4 guifg=#a0ee40 guibg=#3f3f3f
""hi User5 guifg=#eeee40 guibg=#3f3f3f
""hi User6 guifg=#1980ff guibg=#3f3f3f
""hi User7 guifg=#3d3d3d guibg=#3f3f3f
""hi User8 guifg=#eea060
""hi User9 guifg=#ad3a3a

""""""""""""""""""""""""""""""""""""""
""""""" End User Defined Status Line.
""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""
""""""" Vim-Session
""""""""""""""""""""""""""""""""""""""

set sessionoptions-=help

let g:session_autosave = 'no'

""""""""""""""""""""""""""""""""""""""
""""""" End Vim-Session
""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""
""""""" Fuzzyfinder
""""""""""""""""""""""""""""""""""""""
map ,,  :FufCoverageFile!<cr>
let g:fuf_coveragefile_exclude = '\v\~$|\.(o|exe|dll|bak|orig|swp)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|(tmp|log|db/migrate|vendor)'
let g:fuf_enumeratingLimit = 5000
let g:fuf_coveragefile_prompt = '=>'
""""""""""""""""""""""""""""""""""""""
""""""" End Fuzzyfinder
""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""
""""""" Ruby and Rails
""""""""""""""""""""""""""""""""""""""

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails_proactive = 1
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

""""""""""""""""""""""""""""""""""""""
""""""" End Ruby Complete
""""""""""""""""""""""""""""""""""""""

let java_allow_cpp_keywords=1

""""""""""""""""""""""""""""""""""""""
"""""""""" Display extra whitespace
""""""""""""""""""""""""""""""""""""""
" Display extra whitespace

fun! StripTrailingWhitespace()
    " Don't strip on these filetypes
    if &ft =~ 'markdown'
        return
    endif
    %s/\s\+$//e
endfun

autocmd BufWritePre * call StripTrailingWhitespace()
