
* Helm generic help
\<helm-map>
`helm' is an Emacs incremental completion and selection narrowing framework.

Narrow the list by typing some pattern,
Multiple patterns are allowed by splitting by space.
Select with natural Emacs operations, choose with RET.

** Help

C-h m : Run this generic help for helm.
C-c ? : Run specific helm help for current source.

** Basic Operations

C-p, Up: Previous Line
C-n, Down : Next Line
M-v, PageUp : Previous Page
C-v, PageDown : Next Page
Enter : Execute first (default) action / Select
M-< : First Line
M-> : Last Line
M-PageUp, C-M-S-v, C-M-y : Previous Page (other-window)
M-PageDown, C-M-v : Next Page (other-window)

Tab, C-i : Show action list
Left : Previous Source
Right, C-o : Next Source
C-k : Delete pattern (with prefix arg delete from point to end)
C-j or C-z: Persistent Action (Execute action with helm session kept)

** Shortcuts For nth Action

f1-12: Execute nth 1 to 12 Action(s).

** Visible Marks

Visible marks store candidate. Some actions uses marked candidates.

\[helm-toggle-visible-mark] : Toggle Visible Mark
\[helm-prev-visible-mark] : Previous Mark
\[helm-next-visible-mark] : Next Mark

** Miscellaneous Commands

\[helm-toggle-resplit-window] : Toggle vertical/horizontal split helm window.
\[helm-quit-and-find-file] : Drop into `find-file'.
\[helm-delete-current-selection] : Delete selected item (visually).
\[helm-kill-selection-and-quit] : Kill display value of candidate and quit (with prefix arg kill the real value).
\[helm-yank-selection] : Yank selection into pattern.
\[helm-follow-mode] : Toggle automatical execution of persistent action.
\[helm-follow-action-forward] : Run persistent action and goto next line.
\[helm-follow-action-backward] : Run persistent action and goto previous line.
\[helm-force-update] : Recalculate and redisplay candidates.

** Global Commands

\<global-map>\[helm-resume] revives last `helm' session.
It is very useful, so you should bind any key.
* Helm Buffer


** Helm buffers tips:

*** Completion:

**** Major-mode:

You can enter a partial name of major-mode (e.g lisp, sh) to narrow down buffers.
To specify the major-mode, prefix it with "*" e.g "*lisp".
If you want to match all buffers but the ones with a specific major-mode (negation),
prefix the major-mode with "!" e.g "*!lisp".
If you want to specify more than one major-mode, separate them with ",",
e.g "*!lisp,!sh,!fun" will list all buffers but the ones in lisp-mode, sh-mode and
fundamental-mode.

Enter then a space and a pattern to narrow down to buffers matching this pattern.

**** Search inside buffers:

If you enter a space and a pattern prefixed by "@" helm will search for text matching
this pattern INSIDE the buffer (i.e not in the name of buffer).
NOTE that if you enter your pattern prefixed with "@" but escaped, helm will search a buffer
matching "@pattern" but will not search inside.

**** Search by directory name:

If you prefix the beginning of pattern with "/" the match will occur on directory name
of buffer, it is interesting to narrow down to one directory for example, subsequent string
entered after a space will match on buffer-name only.
Note that negation is not supported for matching on buffer-file-name.
You can specify more than one directory starting from helm v1.6.8
 
**** Fuzzy matching:

Note that if `helm-buffers-fuzzy-matching' is non--nil you will have
fuzzy matching on buffer names (not on directory name matching and major-mode though).
A pattern starting with "^" will disable fuzzy matching and will match by exact regexp.

**** Examples:

if I enter in pattern prompt:
"*lisp ^helm @moc"
helm will narrow down the list by selecting only buffers that are in lisp mode, start by helm
and match "moc" in their contents.

if I enter in pattern prompt:
"*lisp ^helm moc"
Notice there is no "@" this time
helm will look for lisp mode buffers starting by "helm" and have "moc" in their name.

if I enter in pattern prompt:
"*!lisp !helm"
helm will narrow down to buffers that are not in "lisp" mode and that do not match "helm"

if I enter in pattern prompt:
/helm/ w3
helm will narrow down to buffers that are in any "helm" subdirectory and matching w3.


*** Creating buffers

When creating a new buffer use \[universal-argument] to choose a mode for your buffer in a list.
This list is customizable, see `helm-buffers-favorite-modes'.

*** Killing buffers

You have a command to kill buffer(s) and quit emacs and a command to kill buffers one by one
(no marked) without quitting helm.
You can run this persistent kill buffer command either with the regular
`helm-execute-persistent-action' called with a prefix arg (C-u C-j) or with its specific command
`helm-buffer-run-kill-persistent' see binding below.

*** Meaning of colors and prefixes for buffers:

Remote buffers are prefixed with '@'.
Red        => Buffer have its file modified on disk by an external process.
Indianred2 => Buffer exists but its file have been deleted.
Orange     => Buffer is modified and its file not saved to disk.
Italic     => A non--file buffer.


** Specific commands for `helm-buffers-list':
\<helm-buffer-map>
\[helm-buffer-run-zgrep]		->Grep Buffer(s) works as zgrep too (C-u grep all buffers but non--file buffers).
\[helm-buffers-run-multi-occur]		->Multi Occur buffer or marked buffers. (C-u toggle force searching current-buffer).
\[helm-buffer-switch-other-window]		->Switch other window.
\[helm-buffer-switch-other-frame]		->Switch other frame.
\[helm-buffer-run-query-replace-regexp]		->Query replace regexp in marked buffers.
\[helm-buffer-run-query-replace]		->Query replace in marked buffers.
\[helm-buffer-run-ediff]		->Ediff current buffer with candidate.  If two marked buffers ediff those buffers.
\[helm-buffer-run-ediff-merge]		->Ediff merge current buffer with candidate.  If two marked buffers ediff merge those buffers.
\[helm-buffer-diff-persistent]		->Toggle Diff buffer with saved file without quitting.
\[helm-buffer-revert-persistent]		->Revert buffer without quitting.
\[helm-buffer-save-persistent]		->Save buffer without quitting.
\[helm-buffer-run-kill-buffers]		->Delete marked buffers and quit.
\[helm-buffer-run-kill-persistent]		->Delete buffer without quitting helm.
\[helm-toggle-all-marks]		->Toggle all marks.
\[helm-mark-all]		->Mark all.
\[helm-toggle-buffers-details]		->Toggle details.
\[helm-buffers-toggle-show-hidden-buffers]		->Show hidden buffers.
\[helm-buffers-mark-similar-buffers]		->Mark all buffers with same type (color) than current.
\[helm-buffer-help]		->Display this help.

** Helm Map
\{helm-map}
* Helm Find Files


** Helm find files tips:

*** Enter `~/' at end of pattern to quickly reach home directory.

*** Enter `/' at end of pattern to quickly reach root of your file system.

*** Enter `./' at end of pattern to quickly reach `default-directory' (initial start of session).
  If you are already in `default-directory' this will move cursor on top.

*** Enter `../' at end of pattern will reach upper directory, moving cursor on top.
  NOTE: This different to using `C-l' in that `C-l' don't move cursor on top but stay on previous
  subdir name.

*** You can complete with partial basename (start on third char entered)

  e.g "fob" or "fbr" will complete "foobar"
  but "fb" will wait for a third char for completing.

*** Use `C-u C-j' to watch an image.

*** `C-j' on a filename will expand in helm-buffer to this filename.
  Second hit on `C-j' will display buffer filename.
  Third hit on `C-j' will kill buffer filename.
  NOTE: `C-u C-j' will display buffer directly.

*** To browse images directories turn on `helm-follow-mode' and navigate with arrow keys.
  You can also use `helm-follow-action-forward' and `helm-follow-action-backward'
  (`C-<down' and `C-<left>').

*** You can turn off/on (toggle) autoupdate completion at any moment with `C-DEL'.
  NOTE: On a terminal C-<backspace> may not work, use in this case C-c <backspace>.

*** You can create a new directory and a new file at the same time.
  just write the path in prompt and press `<RET>'.
  e.g You can create "~/new/newnew/newnewnew/my_newfile.txt".

*** To create a new directory, add a "/" at end of new name and press <RET>.

*** To create a new file just write the filename not ending with "/".

*** Recursive search from helm find files

**** You can use helm browse project (see binding below).

- With no prefix arg
  If your current directory is under version control
  with one of git or hg and you have installed helm-ls-git and/or helm-ls-hg
  https://github.com/emacs-helm/helm-ls-git.git
  https://github.com/emacs-helm/helm-ls-hg
  you will see all your files under version control, otherwise
  you will be back to helm-find-files.
- With one prefix arg
  You will see all the files under this directory
  and other subdirectories (recursion) and this list of files will be cached.
- With two prefix args
  same but the cache will be refreshed.

**** You can start a recursive search with Locate of Find (See commands below).
  With Locate you can use a local db with a prefix arg; If the localdb doesn't already
  exists, you will be prompted for its creation, if it exists and you want to refresh it,
  give two prefix args.

*** Insert filename at point or complete filename at point

On insertion (no completion, i.e nothing at point):

- `C-c i'         => insert absolute file name.
- `C-u C-c i'     => insert abbreviate file name.
- `C-u C-u C-c i' => insert relative file name.

On completion:

- target starts by ~/           => insert abbreviate file name.
- target starts by / or [a-z]:/ => insert full path.
- otherwise                     => insert relative file name.

*** Using wildcard to select multiple files

Use of wilcard is supported to give a set of files to an action:

e.g
You can copy all the files with ".el" extension by using "*.el"
and then run your copy action.

You can do the same but with "**.el" (note the two stars),
this will select recursively all ".el" files under current directory.

NOTE: When using an action that involve an external backend (e.g grep), using "**"
is not advised (even if it works fine) because it will be slower to select all your files,
you have better time letting the backend doing it, it will be faster.
However, if you know you have not many files it is reasonable to use this,
also using not recursive wilcard (e.g "*.el") is perfectly fine for this.

This feature ("**") is activated by default with the option `helm-file-globstar'.
The directory selection with "**foo/" like bash shopt globstar option is not supported yet.

*** Bookmark your `helm-find-files' session

You can bookmark your `helm-find-files' session with `C-x r m'.
You can retrieve later these bookmarks easily by using M-x helm-filtered-bookmarks.


** Specific commands for `helm-find-files':

\<helm-find-files-map>
\[helm-ff-run-locate]		->Run Locate (C-u to specify locate db, M-n insert basename of candidate)
\[helm-ff-run-browse-project]		->Browse project (`C-u' recurse, `C-u C-u' recurse and refresh db)
\[helm-ff-run-find-sh-command]		->Run Find shell command from this directory.
\[helm-ff-run-grep]		->Run Grep (C-u Recursive).
\[helm-ff-run-pdfgrep]		->Run Pdfgrep on marked files.
\[helm-ff-run-zgrep]		->Run zgrep (C-u Recursive).
\[helm-ff-run-etags]		->Run Etags (C-u use thing-at-point `C-u C-u' reload cache)
\[helm-ff-run-rename-file]		->Rename File (C-u Follow).
\[helm-ff-run-query-replace-on-marked]		->Query replace on marked files.
\[helm-ff-run-copy-file]		->Copy File (C-u Follow).
\[helm-ff-run-byte-compile-file]		->Byte Compile File (C-u Load).
\[helm-ff-run-load-file]		->Load File.
\[helm-ff-run-symlink-file]		->Symlink File.
\[helm-ff-run-hardlink-file]		->Hardlink file.
\[helm-ff-run-delete-file]		->Delete File.
\[helm-ff-run-kill-buffer-persistent]		->Kill buffer candidate without quitting.
\[helm-ff-persistent-delete]		->Delete file without quitting.
\[helm-ff-run-switch-to-eshell]		->Switch to Eshell.
\[helm-ff-run-eshell-command-on-file]		->Eshell command on file (C-u Apply on marked files, otherwise treat them sequentially).
\[helm-ff-run-ediff-file]		->Ediff file.
\[helm-ff-run-ediff-merge-file]		->Ediff merge file.
\[helm-ff-run-complete-fn-at-point]		->Complete file name at point.
\[helm-ff-run-switch-other-window]		->Switch other window.
\[helm-ff-run-switch-other-frame]		->Switch other frame.
\[helm-ff-run-open-file-externally]		->Open file with external program (C-u to choose).
\[helm-ff-run-open-file-with-default-tool]		->Open file externally with default tool.
\[helm-ff-rotate-left-persistent]		->Rotate Image Left.
\[helm-ff-rotate-right-persistent]		->Rotate Image Right.
\[helm-find-files-up-one-level]		->Go down precedent directory.
\[helm-ff-run-switch-to-history]		->Switch to last visited directories history.
\[helm-ff-file-name-history]		->Switch to file name history.
\[helm-ff-properties-persistent]		->Show file properties in a tooltip.
\[helm-mark-all]		->Mark all visibles candidates.
\[helm-ff-run-toggle-auto-update]		->Toggle auto expansion of directories.
\[helm-unmark-all]		->Unmark all candidates, visibles and invisibles.
\[helm-ff-run-gnus-attach-files]		->Gnus attach files to message buffer.
\[helm-ff-run-print-file]		->Print file, (C-u to refresh printers list).
\[helm-enlarge-window]		->Enlarge helm window.
\[helm-narrow-window]		->Narrow helm window.
\[helm-ff-run-toggle-basename]		->Toggle basename/fullpath.
\[helm-ff-run-find-file-as-root]		->Find file as root.
\[helm-ff-run-insert-org-link]		->Insert org link.
\[helm-ff-help]		->Display this help info.

** Helm Map

\{helm-map}
* Helm read file name


** Helm read file name tips:


*** Enter `~/' at end of pattern to quickly reach home directory.

*** Enter `/' at end of pattern to quickly reach root of your file system.

*** Enter `./' at end of pattern to quickly reach `default-directory' (initial start of session).
  If you are in `default-directory' move cursor on top.

*** Enter `../' at end of pattern will reach upper directory, moving cursor on top.
  NOTE: This different to using `C-l' in that `C-l' don't move cursor on top but stay on previous
  subdir name.

*** You can complete with partial basename (start on third char entered)

  e.g "fob" or "fbr" will complete "foobar"
  but "fb" will wait for a third char for completing.

*** Persistent actions:

By default `helm-read-file-name' use the persistent actions of `helm-find-files'.

**** Use `C-u C-j' to watch an image.

**** `C-j' on a filename will expand in helm-buffer to this filename.
  Second hit on `C-j' will display buffer filename.
  Third hit on `C-j' will kill buffer filename.
  NOTE: `C-u C-j' will display buffer directly.

**** To browse images directories turn on `helm-follow-mode' and navigate with arrow keys.

**** When you want to delete backward characters to e.g creating a new file or directory,
  autoupdate may keep updating to an existent directory
  preventing you to do so, in this case just hit C-<backspace> and then <backspace>.
  This should not needed when copying/renaming files because autoupdate is disabled
  by default in this case.
  NOTE: On a terminal C-<backspace> may not work, use in this case C-c <backspace>.

**** You can create a new directory and a new file at the same time, just write the path in prompt
  and press <RET>.
  e.g You can create "~/new/newnew/newnewnew/my_newfile.txt".

**** To create a new directory, add a "/" at end of new name and press <RET>.

**** To create a new file just write the filename not ending with "/".


** Specific commands for helm-read-file-name:

\<helm-read-file-map>
\[helm-find-files-up-one-level]		->Go down precedent directory.
\[helm-ff-run-toggle-auto-update]		->Toggle auto expansion of directories.
\[helm-ff-run-toggle-basename]		->Toggle basename.
\[helm-ff-file-name-history]		->File name history.
C/\[helm-cr-empty-string]		->Maybe return empty string (unless `must-match').
\[helm-next-source]		->Goto next source.
\[helm-previous-source]	->Goto previous source.
\[helm-read-file-name-help]		->Display this help info.

** Helm Map

\{helm-map}
* Helm Generic files


** Helm generic file tips:


*** Locate
You can add after writing search pattern any of the locate command line options.
e.g -b, -e, -n <number>...etc.
See Man locate for more infos.

Some other sources (at the moment recentf and file in current directory sources)
support the -b flag for compatibility with locate when they are used with it.

*** Browse project

When your directory is not under version control,
don't forget to refresh your cache when files have been added/removed in your directory.

*** Find command

Recursively search files using "find" shell command.

Candidates are all filenames that match all given globbing patterns.
This respects the options `helm-case-fold-search' and
`helm-findutils-search-full-path'.

You can pass arbitrary options directly to find after a "*" separator.
For example, this would find all files matching "book" that are larger
than 1 megabyte:

book * -size +1M


** Specific commands for helm locate and others files sources:

\<helm-generic-files-map>
\[helm-ff-run-toggle-basename]		->Toggle basename.
\[helm-ff-run-grep]		->Run grep (C-u recurse).
\[helm-ff-run-pdfgrep]		->Run Pdfgrep on marked files.
\[helm-ff-run-delete-file]		->Delete file.
\[helm-ff-run-ediff-file]		->Ediff file.
\[helm-ff-run-ediff-merge-file]		->Ediff merge file.
\[helm-ff-run-switch-other-window]		->Switch other window.
\[helm-ff-properties-persistent]		->Show file properties.
\[helm-ff-run-etags]		->Run etags (C-u use tap, C-u C-u reload DB).
\[helm-yank-text-at-point]		->Yank text at point.
\[helm-ff-run-open-file-externally]		->Open file with external program (C-u to choose).
\[helm-ff-run-open-file-with-default-tool]		->Open file externally with default tool.
\[helm-ff-run-insert-org-link]		->Insert org link.
\[helm-generic-file-help]		->Show this help.

** Helm Map

\{helm-map}
* Helm Grep

** Helm grep tips:

*** You can start grep with a prefix arg to recurse in subdirectories.
*** You can use wild card when selecting files (e.g *.el)
*** You can grep in many differents directories by marking files or wild cards.
*** You can save your results in a grep-mode buffer, see commands below.

*** Important:

Grepping on remote file will work only with grep, not ack-grep, but it is
anyway bad supported as tramp doesn't support multiple process running in a
short delay (less than 5s actually) among other things,
so I strongly advice hitting `C-!' (i.e suspend process)
before entering anything in pattern, and hit again `C-!' when
your regexp is ready to send to remote process, even if helm is handling
this by delaying each process at 5s. 
Or even better don't use tramp at all and mount your remote file system on SSHFS.


** Specific commands for Helm Grep:

\<helm-grep-map>
\[helm-goto-next-file]	->Next File.
\[helm-goto-precedent-file]		->Precedent File.
\[helm-yank-text-at-point]		->Yank Text at point in minibuffer.
\[helm-grep-run-other-window-action]		->Jump other window.
\[helm-grep-run-other-frame-action]		->Jump other frame.
\[helm-grep-run-persistent-action]		->Run persistent action (Same as `C-j').
\[helm-grep-run-default-action]		->Run default action (Same as RET).
\[helm-grep-run-save-buffer]		->Save to a `grep-mode' enabled buffer.
\[helm-grep-help]		->Show this help.

** Helm Map

\{helm-map}
* Helm PdfGrep Map


** Specific commands for Pdf Grep:

\<helm-pdfgrep-map>
\[helm-goto-next-file]	->Next File.
\[helm-goto-precedent-file]		->Precedent File.
\[helm-yank-text-at-point]		->Yank Text at point in minibuffer.
\[helm-pdfgrep-help]		->Show this help.

** Helm Map

\{helm-map}
* Helm Etags Map


** Specific commands for Etags:

\<helm-etags-map>
\[helm-goto-next-file]	->Next File.
\[helm-goto-precedent-file]		->Precedent File.
\[helm-yank-text-at-point]		->Yank Text at point in minibuffer.
\[helm-etags-help]		->Show this help.

** Helm Map

\{helm-map}
* Helm Ucs


** Specific commands for `helm-ucs':

\<helm-ucs-map>
\[helm-ucs-persistent-insert]	->Insert char.
\[helm-ucs-persistent-forward]	->Forward char.
\[helm-ucs-persistent-backward]	->Backward char.
\[helm-ucs-persistent-delete]	->Delete char backward.
\[helm-ucs-help]		->Show this help.


** Helm Map

\{helm-map}
* Helm bookmark name


** Specific commands for bookmarks:

\<helm-bookmark-map>
\[helm-bookmark-run-jump-other-window]		->Jump other window.
\[helm-bookmark-run-delete]		->Delete bookmark.
\[helm-bookmark-run-edit]		->Edit bookmark.
\[helm-bookmark-toggle-filename]		->Toggle bookmark location visibility.
\[helm-bookmark-help]		->Run this help.

** Helm Map

\{helm-map}
* Helm eshell on file

** Helm eshell on file tips:

*** Passing extra args after filename:

Normally your command or alias will be called with file as argument.

e.g <command> 'candidate_file'

But you can also pass an argument or more after 'candidate_file' like this:

<command> %s [extra_args]


'candidate_file' will be added at '%s' and your command will look at this:

<command> 'candidate_file' [extra_args]

*** Specify many files as args (marked files):

e.g <command> file1 file2 ...

Call `helm-find-files-eshell-command-on-file' with one prefix-arg
Otherwise you can pass one prefix-arg from the command selection buffer.
NOTE: This is not working on remote files.

With two prefix-arg before starting or from the command selection buffer
the output is printed to your `current-buffer'.

Note that with no prefix-arg or a prefix-arg value of '(16) (C-u C-u)
the command is called once for each file like this:

<command> file1 <command> file2 etc...


** Specific commands for `helm-find-files-eshell-command-on-file':

\<helm-esh-on-file-map>
\[helm-esh-help]		->Display this help.

** Helm Map

\{helm-map}
* Helm ido virtual buffers


** Specific commands for ido virtuals buffers:

\<helm-buffers-ido-virtual-map>
\[helm-ff-run-switch-other-window]		->Switch other window.
\[helm-ff-run-switch-other-frame]		->Switch other frame.
\[helm-ff-run-grep]		->Grep file.
\[helm-ff-run-zgrep]		->Zgrep file.
\[helm-ff-run-delete-file]		->Delete file.
\[helm-ff-run-open-file-externally]		->Open file externally.
\[helm-buffers-ido-virtual-help]		->Display this help.

** Helm Map

\{helm-map}
* Helm Moccur

** Helm Moccur tips:

*** Matching
Multiple regexp matching is allowed, just enter a space to separate your regexps.

Matching empty lines is supported with the regexp "^$", you will get the results
with only the buffer-name and the line number, you can of course save and edit these
results.

*** Jump to the corresponding line in the searched buffer
You can do this with `C-j' (persistent-action), to do it repetitively
you can use `C-<up>' and `C-<down>' or enable `helm-follow-mode' with `C-c C-f'.

*** Saving results
Same as with helm-grep, you can save the results with `C-x C-s'.
Of course if you don't save your results, you can get back your session
with `helm-resume'.

*** Refreshing the resumed session.
When the buffer(s) where you ran helm-(m)occur have been modified, you will be
warned of this with the buffer flashing to red, you can refresh the buffer by running
`C-c C-u'.
This can be done automatically by customizing `helm-moccur-auto-update-on-resume'.

*** Refreshing a saved buffer
Just hit `g' to update your buffer.

*** Edit a saved buffer

To do so you have to install wgrep
https://github.com/mhayashi1120/Emacs-wgrep
and then:

1) C-c C-p to edit the buffer(s).
2) C-x C-s to save your changes.

Tip: Use the excellent iedit https://github.com/tsdh/iedit
to modify occurences in your buffer.


** Specific commands for Helm Moccur:

\<helm-moccur-map>
\[helm-goto-next-file]	->Next Buffer.
\[helm-goto-precedent-file]		->Precedent Buffer.
\[helm-yank-text-at-point]		->Yank Text at point in minibuffer.
\[helm-moccur-run-goto-line-ow]		->Goto line in other window.
\[helm-moccur-run-goto-line-of]		->Goto line in new frame.
\[helm-moccur-help]		->Show this help.

** Helm Map

\{helm-map}
* Helm Top


** Helm Top tips:


** Specific commands for Helm Top:

\<helm-top-map>
\[helm-top-run-sort-by-com]	->Sort by commands.
\[helm-top-run-sort-by-cpu]	->Sort by cpu usage.
\[helm-top-run-sort-by-user]	->Sort alphabetically by user.
\[helm-top-run-sort-by-mem]	->Sort by memory.

** Helm Map

\{helm-map}
* Helm Apt


** Helm Apt tips:


** Specific commands for Helm Apt:

\<helm-apt-map>
\[helm-apt-show-all]	->Show all packages.
\[helm-apt-show-only-installed]	->Show installed packages only.
\[helm-apt-show-only-not-installed]	->Show not installed packages only.
\[helm-apt-show-only-deinstalled]	-Show deinstalled (not purged yet) packages only.>

** Helm Map

\{helm-map}
* Helm elisp package


** Helm elisp package tips:
*** Upgrade elisp packages

To see upgradables packages hit <M-U>.

Then you can install all upgradables packages with the upgrade all action,
or upgrade only the specific packages by marking them (the new ones) and running
the upgrade action (visible only when there is upgradables packages).
Of course you can upgrade a single package by just running the upgrade action
without marking it.

*** Meaning of flags prefixing packages (Emacs-25)

- The flag "S" that prefix package names mean that this package is one of `package-selected-packages'.
This feature is only available with emacs-25.

- The flag "U" that prefix package names mean that this package is no more needed.
This feature is only available with emacs-25.


** Specific commands for Helm elisp package:

\<helm-el-package-map>
\[helm-el-package-show-all]	->Show all packages.
\[helm-el-package-show-installed]	->Show installed packages only.
\[helm-el-package-show-uninstalled]	->Show not installed packages only.
\[helm-el-package-help]	->Show this help.

** Helm Map

\{helm-map}
* Helm M-x


** Helm M-x tips:

*** You can get help on any command with persistent action (C-j).

*** All the prefix args passed BEFORE running `helm-M-x' are ignored,
you should have an error message if you do so.
When you want to pass prefix args, pass them AFTER starting `helm-M-x',
you will have a prefix arg counter appearing in mode-line notifying you
the amount of prefix args entered.


** Specific commands for Helm M-x:

\<helm-M-x-map>
\[helm-M-x-help]		->Show this help.

** Helm Map

\{helm-map}
* Helm imenu


** Helm imenu tips:


** Specific commands for Helm imenu:

\<helm-imenu-map>
\[helm-imenu-help]	->Show this help.

** Helm Map

\{helm-map}
* Helm colors


** Specific commands for Helm colors:

\<helm-color-map>
\[helm-color-run-insert-name]		Insert the entry'name.
\[helm-color-run-kill-name]		Kill the entry's name.
\[helm-color-run-insert-rgb]		Insert entry in RGB format.
\[helm-color-run-kill-rgb]		Kill entry in RGB format.
\[helm-color-help]		Show this help.

** Helm Map

\{helm-map}
* Helm semantic


** Helm semantic tips:


** Specific commands for Helm semantic:

\<helm-semantic-map>
\[helm-semantic-help]	->Show this help.

** Helm Map

\{helm-map}
* Helm kmacro


** Helm kmacro tips:
- Start recording some keys with `f3'
- Record new kmacro with `f4'
- Start `helm-execute-kmacro' to list all your macros.

Use persistent action to run your kmacro as many time as needed,
you can change of kmacro with `helm-next-line' `helm-previous-line'.

NOTE: You can't record keys running helm commands.


** Specific commands for Helm kmacro:

\<helm-kmacro-map>
\[helm-kmacro-help]	->Show this help.

** Helm Map

\{helm-map}